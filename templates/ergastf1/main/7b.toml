title = ""
# same as 7, but adding constructor + c.nationality in the mix too

[base_sql]

sql = '''
SELECT d1."nationality",c1."nationality",c2."nationality", COUNT(*)
FROM results res1,
results res2,
status s1,
status s2,
drivers d1,
drivers d2,
races r1,
races r2,
constructors c1,
"constructorResults" cr1,
"constructorStandings" cs1,
constructors c2,
"constructorResults" cr2,
"constructorStandings" cs2
WHERE
res1."raceId" = r1."raceId"
AND res2."raceId" = r2."raceId"
AND res1."statusId" = s1."statusId"
AND res2."statusId" = s2."statusId"
AND d1."driverId" = res1."driverId"
AND d2."driverId" = res2."driverId"
AND d1."driverId" = d2."driverId"
AND c1."constructorId" = cr1."constructorId"
AND c1."constructorId" = cs1."constructorId"
AND cr1."raceId" = r1."raceId"
AND cr1."raceId" = cs1."raceId"
AND c1."constructorId" = res1."constructorId"
AND c2."constructorId" = cr2."constructorId"
AND c2."constructorId" = cs2."constructorId"
AND cr2."raceId" = r2."raceId"
AND cr2."raceId" = cs2."raceId"
AND c2."constructorId" = res2."constructorId"
AND c1."constructorId" = c2."constructorId"
AND (Xstatus1)
AND (Xposition1)
AND (Xposition2)
AND (Xstatus2)
AND (X2position1)
AND (X2position2)
GROUP BY d1."nationality",c1."nationality",c2."nationality" ORDER BY COUNT(*) DESC
'''

[[templates]]

  name = ""

  [[templates.predicates]]
  [[templates.predicates.multi]]
  type = "sqls"
  columns = ["res1.position"]
  keys = ["Xposition1"]
  dependencies = 0
  sampling_method = "uniform"
  pred_type = "<="
  sqls = ["""SELECT position FROM results WHERE position <= 3""",
	"""SELECT position FROM results WHERE position > 3 AND position <= 6""",
	]
  min_samples = 1
  max_samples = 1

  [[templates.predicates.multi]]
  type = "sqls"
  columns = ["res1.position"]
  keys = ["Xposition1"]
  dependencies = 0
  sampling_method = "uniform"
  pred_type = ">"
  sqls = ["""SELECT position FROM results WHERE position <= 3""",
	"""SELECT position FROM results WHERE position > 10"""
	]
  min_samples = 1
  max_samples = 1

  [[templates.predicates]]

  type = "sqls"
  columns = ['res1."positionOrder"']
  keys = ["Xposition2"]
  dependencies = 1
  sampling_method = "uniform"
  pred_type = "<="
  sqls = ["""SELECT "positionOrder" FROM results AS res1 WHERE (Xposition1)"""]
  min_samples = 1
  max_samples = 1

  [[templates.predicates]]
  [[templates.predicates.multi]]
  type = "sqls"
  columns = ["s1.status"]
  keys = ["Xstatus1"]
  dependencies = 0
  sampling_method = "uniform"
  pred_type = "NOT LIKE"
  sqls = ["""SELECT status FROM status s, results res
  WHERE s."statusId" = res."statusId"
  GROUP BY s.status
  HAVING COUNT(*) >= 1000
  """,
  """SELECT status FROM status s, results res
    WHERE s."statusId" = res."statusId"
    GROUP BY s.status
    HAVING COUNT(*) >= 10000
    """]

  min_samples = 1
  max_samples = 1

  [[templates.predicates.multi]]
  type = "sqls"
  columns = ["s1.status"]
  keys = ["Xstatus1"]
  dependencies = 0
  sampling_method = "uniform"
  pred_type = "LIKE"

  sqls = ["""SELECT status FROM status s, results res
  WHERE s."statusId" = res."statusId"
  GROUP BY s.status
  HAVING COUNT(*) >= 1000
  """,
  """SELECT status FROM status s, results res
    WHERE s."statusId" = res."statusId"
    GROUP BY s.status
    HAVING COUNT(*) >= 10000
    """]

  min_samples = 1
  max_samples = 1

  [[templates.predicates]]
  [[templates.predicates.multi]]
  type = "sqls"
  columns = ["s2.status"]
  keys = ["Xstatus2"]
  dependencies = 0
  sampling_method = "uniform"
  pred_type = "NOT LIKE"
  sqls = ["""SELECT status FROM status s, results res
  WHERE s."statusId" = res."statusId"
  GROUP BY s.status
  HAVING COUNT(*) >= 1000
  """,
  """SELECT status FROM status s, results res
    WHERE s."statusId" = res."statusId"
    GROUP BY s.status
    HAVING COUNT(*) >= 10000
    """]

  min_samples = 1
  max_samples = 1

  [[templates.predicates.multi]]
  type = "sqls"
  columns = ["s2.status"]
  keys = ["Xstatus2"]
  dependencies = 0
  sampling_method = "uniform"
  pred_type = "LIKE"

  sqls = ["""SELECT status FROM status s, results res
  WHERE s."statusId" = res."statusId"
  GROUP BY s.status
  HAVING COUNT(*) >= 5000
  """,
  """SELECT status FROM status s, results res
    WHERE s."statusId" = res."statusId"
    GROUP BY s.status
    HAVING COUNT(*) >= 10000
    """]

  min_samples = 1
  max_samples = 1

  [[templates.predicates]]
  [[templates.predicates.multi]]
  type = "sqls"
  columns = ["res2.position"]
  keys = ["X2position1"]
  dependencies = 0
  sampling_method = "uniform"
  pred_type = "<="
  sqls = ["""SELECT position FROM results WHERE position <= 3""",
	"""SELECT position FROM results WHERE position > 3 AND position <= 6""",
	]
  min_samples = 1
  max_samples = 1

  [[templates.predicates.multi]]
  type = "sqls"
  columns = ["res2.position"]
  keys = ["X2position1"]
  dependencies = 0
  sampling_method = "uniform"
  pred_type = ">"
  sqls = ["""SELECT position FROM results WHERE position <= 3""",
  """SELECT position FROM results WHERE position > 10"""
  ]
  min_samples = 1
  max_samples = 1

  [[templates.predicates]]

  type = "sqls"
  columns = ['res2."positionOrder"']
  keys = ["X2position2"]
  dependencies = 1
  sampling_method = "uniform"
  pred_type = "<="
  sqls = ["""SELECT "positionOrder" FROM results AS res2 WHERE (X2position1)"""]
  min_samples = 1
  max_samples = 1

